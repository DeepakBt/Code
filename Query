IF OBJECT_ID('tempdb..#TempData') IS NOT NULL  --Temp Check
	DROP TABLE #TempData 
SELECT RIGHT('00000'+ CAST(4 AS VARCHAR(5)), 5) AS 'EmpCode' --Numeric Padding

----------------------------------------
--For Creating Schema
CREATE XML SCHEMA COLLECTION SimpleMasterTagsSchema AS
'<?xml version="1.0" encoding="Windows-1252"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="tags">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Raisedby" type="xs:string" minOccurs="0" />
        <xs:element name="RelationshipNo" type="xs:unsignedInt" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>'

--For Check Schema created or Not
SELECT * FROM sys.xml_schema_collections; 
SELECT * FROM sys.xml_schema_collections where name ='SimpleMasterTagsSchema'

--For viewing Schema namespace
SELECT * FROM sys.xml_schema_namespaces;

--For Viewing schema text 
SELECT XML_SCHEMA_NAMESPACE (N'dbo', N'SimpleMasterTagsSchema')

--For Droping Schema
DROP XML SCHEMA COLLECTION SimpleMasterTagsSchema

--For Implementing schema in xml column
CREATE TABLE TestSchema (  
        i int identity primary key,   
        x xml (SimpleMasterTagsSchema)); 

OR by using Alter Command

ALTER TABLE TestSchema
ALTER Column x xml (SimpleMasterTagsSchema)

--XML value Filetr using value method in ms sql
SELECT x.value('(/tags/Raisedby)[1]','varchar(100)' ) AS 'MyValue' FROM TestSchema 
WHERE x.value('(/tags/Raisedby)[1]','varchar(100)' ) ='NewData'



------Index on XML
--Index Cluster
ALTER TABLE TicketsXmlIndex ADD CONSTRAINT [PK_TicketId] PRIMARY KEY CLUSTERED
(
TicketId ASC
)
--Primary Index on XML
CREATE PRIMARY XML INDEX [MasterTagPrimaryIndex]
ON TicketsXmlIndex(MasterTags)
GO
--Secondary index on Xml
CREATE XML INDEX [MasterTagSecIndex_Path] ON TicketsXmlIndex(MasterTags)
USING XML INDEX [MasterTagPrimaryIndex]
FOR PATH 

--Index Drop 
DROP INDEX MasterTagPrimaryIndex   
    ON TicketsXmlIndex; 
----------------------------------------------------------------------------------
ALTER TABLE TicketsXmlIndex ADD CONSTRAINT [PK_TicketId] PRIMARY KEY CLUSTERED
(
TicketId ASC
)

CREATE PRIMARY XML INDEX [MasterTagPrimaryIndex]
ON TicketsXmlIndex(MasterTags)
GO

CREATE XML INDEX [MasterTagSecIndex_Path] ON TicketsXmlIndex(MasterTags)
USING XML INDEX [MasterTagPrimaryIndex]
FOR PATH 

CREATE NONCLUSTERED INDEX IAssignedTo
ON TicketsXmlIndex (AssignedTo);

CREATE NONCLUSTERED INDEX IUpdatedBy
ON TicketsXmlIndex (UpdatedBy);

CREATE NONCLUSTERED INDEX IRaisedby
ON TicketsXmlIndex (Raisedby);

CREATE NONCLUSTERED INDEX Itype
ON TicketsXmlIndex (Type);

CREATE NONCLUSTERED INDEX ISubType
ON TicketsXmlIndex (SubType);

CREATE NONCLUSTERED INDEX IInst_Id
ON TicketsXmlIndex (Inst_Id);

DBCC DBREINDEX ('TicketsXmlIndex')


DBCC DBREINDEX ('TicketsXmlIndex', PK_TicketId,80); 

---------------------------------------------------------------------------------------------------------------------
-------------Resources Check in MS SQL
SELECT sqltext.TEXT,
 DB_NAME(database_id) [Database],
req.session_id,
req.status,
req.command,
req.cpu_time,
req.total_elapsed_time,
req.*
FROM sys.dm_exec_requests req
CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS sqltext
where req.session_id=210
order by req.total_elapsed_time desc

------------Resources Check with DB NAme in MS Sql
SELECT      r.start_time [Start Time],session_ID [SPID],
            DB_NAME(database_id) [Database],
            SUBSTRING(t.text,(r.statement_start_offset/2)+1,
            CASE WHEN statement_end_offset=-1 OR statement_end_offset=0 
            THEN (DATALENGTH(t.Text)-r.statement_start_offset/2)+1 
            ELSE (r.statement_end_offset-r.statement_start_offset)/2+1
            END) [Executing SQL], 
            Status,command,wait_type,wait_time,wait_resource, 
            last_wait_type
FROM        sys.dm_exec_requests r
OUTER APPLY sys.dm_exec_sql_text(sql_handle) t
WHERE       session_id != @@SPID -- don't show this query
AND DB_NAME(database_id)='Exponentia'
ORDER BY    r.start_time 

--------------Xml Open tag To DataSet and manupulations
DECLARE @Inst_Id TinyInt
SET @Inst_Id=4
  IF OBJECT_ID('tempdb..#TemplateList') IS NOT NULL                                                     
    DROP TABLE #TemplateList  
	SELECT F.V.value('@ClientType', 'varchar(max)') AS 'ClientType',
    F.V.value('@MeetingType', 'varchar(max)') AS 'MeetingType',
    F.V.value('.','nvarchar(100)') AS 'TemplateId' Into #TemplateList
	FROM Workflow AS WF
    CROSS APPLY WF.OpenTags.nodes('otag/tags/MeetingTemplate') AS F(V) WHERE WorkflowName='Interaction_Workflow'
    
    
   IF OBJECT_ID('tempdb..#TempID') IS NOT NULL                                                     
    DROP TABLE #TempID 
    SELECT DISTINCT MT.TemplateId INTO #TempID FROM Interactions I 
    INNER JOIN TagMaster TM ON I.InteractionType=TM.TagId
    INNER JOIN #TemplateList MT ON MT.MeetingType=TM.tagName AND TM.Inst_Id=@Inst_Id
    INNER JOIN #TemplateList CT ON CT.ClientType=I.MasterTags.value('(tags/ClientMeetingType/node())[1]','varchar(100)')
    WHERE I.InteractionId =3563 AND TM.TagType='MeetingType'
   
   IF OBJECT_ID('tempdb..#TempTId') IS NOT NULL                                                     
    DROP TABLE #TempTId  
    SELECT  ROW_NUMBER() Over (Order by TemplateId) AS 'SrNo',TemplateId INTO #TempTId FROM #TempID
    
    --SELECT * FROM #TempTId
    
    DECLARE @Count Int,@MaxCount Int,@TemplateStr VARCHAR(Max),@TemplateNode VARCHAR(Max)
    SET @Count=1
    SET @TemplateStr='<tags type="Template_Id">'
    SELECT @MaxCount=MAX(SrNo) From #TempTId
    WHILE(@Count<=@MaxCount)
	BEGIN
		SELECT @TemplateNode=TemplateId FROM #TempTId WHERE SrNo=@Count
		SET @TemplateStr=@TemplateStr+'<Template_Id>'+CONVERT(VARCHAR(10),@TemplateNode)+'</Template_Id>'
		SET @Count=@Count+1
	END
    SET @TemplateStr=@TemplateStr+'</tags>'
    
    SELECT @TemplateStr AS 'Temp'


-----Cross Apply Otag
	SELECT  TS.S.value('.','nvarchar(100)') AS 'ClientType'  from Workflow WF 
	CROSS APPLY WF.OpenTags.nodes('/otag/tags[@type="MeetingTemplate"]/MeetingTemplate/@ClientType') as TS(S)
	WHERE WF.Inst_Id=4 AND WF.WorkflowName='Interaction_Workflow'

-----------Rename Node
update #TempOpp set
  MasterTags = replace(replace(cast(MasterTags as nvarchar(max)), 
                           '<BusinessType>', 
                           '<Business>'), 
                   '</BusinessType>', 
                   '</Business>') where Name='Jack'

------------Extract OpenTags
   IF OBJECT_ID('tempdb..#Temp') is not null                    
   Drop Table #Temp
   SELECT DISTINCT  TMM.Inst_Id,TMM.TagId,CAST(R.U.value('.','nvarchar(100)')AS INT) AS 'ShowTo' INTO #Temp
   FROM TagMaster TM Inner Join TagMaster TMM ON TM.TagId=TMM.TagId AND TMM.Inst_Id=10
   CROSS APPLY TM.OpenTags.nodes('/otag/tags[@type="ShowToUser"]/ShowTo') AS R(U) 
   
---------structure
CREATE PROC [dbo].[SuperStructure]                                       
/************************************************************************
 '     Object Name   : SuperStructure
 '     Purpose       : 
 '     Author        : Deepak
 '     Creation Date : 21 June 2017
Test: 
EXEC SuperStructure 99,8594,'<NewDataSet>
<parenttype>Mood</parenttype>
<ddstatus>Get Lost, Come Back</ddstatus>
</NewDataSet>'
************************************************************************/                                                                   
@Inst_Id INT,@UserId int,@ParamXML xml                                                       
AS                                                                            
BEGIN                                                                                                             
	 DECLARE @I INT, @inTime Datetime,@OutTime Datetime                      
	 set @inTime=getdate()                                                                                                                     
	                                                                                             
		EXEC sp_xml_preparedocument @I OUTPUT, @ParamXML;                                                                            
	                                                                             
	 SELECT * INTO #tbl_XML_Data  FROM OPENXML (@I, 'NewDataSet', 2)                                                                                            
	 WITH                                                                                      
	  (  parentid VARCHAR(100),                                                                            
		 parenttype VARCHAR(100),                                                                 
		 lob VARCHAR(100),
		 fromdate VARCHAR(100),                                                                               
		 todate VARCHAR(100),
		 dealid VARCHAR(100),
		 [status] VARCHAR(100),
		 rm VARCHAR(100),
		 opportunity_id varchar(100),
		 agingday varchar(100),
		 totalaging VARCHAR(100),
		 icstatus VARCHAR(100),
		 riskcategory varchar(100),
		 ddstatus VARCHAR(100)
	  )        
	  
	  IF OBJECT_ID('tempdb..#tbl_XML_Data1') IS NOT NULL
	  DROP TABLE #tbl_XML_Data1  
	 -- SELECT * INTO #tbl_XML_Data1  FROM OPENXML (@I, 'NewDataSet/opportunitystatus/status',2)                                                                                            
		--WITH                                              
		--(                                                                  
		--[status] varchar(100) '.'                                                                      
		--)                             
	;WITH CTE
	AS
	(
    SELECT  [xml_val] = CAST('<t>' + REPLACE(ddstatus,',','</t><t>') + '</t>' AS XML)
    FROM #tbl_XML_Data
	)
	SELECT ddstatus = col.value('.','VARCHAR(100)') INTO #tbl_XML_Data1 FROM CTE 
	CROSS APPLY [xml_val].nodes('/t') CA(col)                                                                                                                                         
	 EXEC sp_xml_removedocument @I;                                
	                                                                             
	                                                                       
	 DECLARE @ParentId VARCHAR(100),@ParentType VARCHAR(100),@LOB VARCHAR(100),@FromDate VARCHAR(100),@ToDate VARCHAR(100),@IgnoreClientSecurity INT,
	 @Status VARCHAR(100),@Rm VARCHAR(100),@Opportunity_Id VARCHAR(100),@agingday VARCHAR(100),@totalaging VARCHAR(100),@icstatus VARCHAR(100),@riskcategory varchar(100)
	                                
	 SELECT @ParentId=parentid,@ParentType=parenttype,@LOB=lob,@FromDate=fromdate,@ToDate=todate,@Status=[status],@Rm=rm,@Opportunity_Id=opportunity_id,
	 @agingday=agingday,@totalaging=totalaging,@icstatus=icstatus,@riskcategory=riskcategory  
	 FROM #tbl_XML_Data     

	 SELECT DISTINCT UserId,ParentType,parentId,AccessAllowed,Inst_Id INTO #Rowlevelsec                                                                             
	 FROM rowlevelsecurity                                                                             
	 WHERE UserId=@UserId                                                                             
	 AND ISNULL(AccessAllowed,0)=1 AND ISNULL(Inst_Id,0)=@Inst_Id                                                    
	                                                              
	 DECLARE @IgnoreProductLevelSecurity INT
	 SELECT @IgnoreProductLevelSecurity=(SELECT COUNT(1) from FeatureMaster WHERE Inst_Id=@Inst_Id AND FeatureId=9 AND IsActive=1)                                      
	                                          
	 IF(@IgnoreProductLevelSecurity=0)                                      
	 BEGIN                                                  
		SET @IgnoreProductLevelSecurity=(SELECT COUNT(1) FROM UserMaster WHERE UserId=@UserId AND Inst_Id=@Inst_Id AND 
		CAST(MasterTags.query('/tags/IgnoreProductRowlevelSecurity/text()') as varchar(5))='1')                                               
	 END                                                                                                                          
	  SET @IgnoreClientSecurity =(SELECT dbo.fun_IsIgnoreRowLevelSecurity(@UserId,@ParentType,@Inst_Id)) 
	  
		 IF OBJECT_ID('tempdb..#tempOpportunity') IS NOT NULL
		DROP TABLE #tempOpportunity
	  SELECT UM.UserId AS 'RM',UM.UserName AS 'RMName',CM.ClientName,O.Opportunity_Id,O.OpportunityValue,O.OpportunityStatus,O.UpdatedDTM,O.MasterTags,O.OpenTags
	  INTO #tempOpportunity FROM Opportunity O INNER JOIN ClientMaster CM ON CM.Client_Id=O.parentId AND O.ParentType='Client'
	   LEFT JOIN #tbl_XML_Data1 xdt ON O.OpportunityStatus = (CASE WHEN (SELECT COUNT(1) from #tbl_XML_Data1)>0 THEN xdt.[ddstatus] ELSE                                                          
         O.OpportunityStatus END)
	  LEFT JOIN UserMaster UM ON UM.UserId=CM.MasterTags.value('(tags/Primary/node())[1]','varchar(100)')
	  LEFT JOIN UserMaster UML ON UML.UserId=CM.MasterTags.value('(tags/Primary/node())[1]','varchar(100)')
	  LEFT JOIN #Rowlevelsec rs on (O.parentId =rs.parentId AND rs.ParentType=O.ParentType)
	  LEFT JOIN #Rowlevelsec rs1 on  rs1.parentId=O.ProductId AND rs1.ParentType='Product'
	  WHERE O.Inst_Id =@Inst_Id AND O.ParentType=@ParentType 
	  --AND (ISNULL(@Status,ISNULL(O.OpportunityStatus,'')) = ISNULL(O.OpportunityStatus,''))
	   AND 1 = (CASE WHEN (SELECT COUNT(1) FROM #tbl_XML_Data1)>0 AND xdt.[ddstatus] IS NOT NULL THEN 1                                                           
		WHEN (SELECT COUNT(1) FROM #tbl_XML_Data1)<= 0 THEN 1                                                           
		ELSE 0 END)
	  AND (ISNULL(@Opportunity_Id,ISNULL(O.Opportunity_Id,'')) = ISNULL(O.Opportunity_Id,''))
	  AND (ISNULL(@ParentId,ISNULL(O.parentId,'')) = ISNULL(O.parentId,''))
	  AND (ISNULL(@riskcategory,ISNULL(O.MasterTags.value('(tags/RiskCategory/node())[1]','varchar(100)'),'')) = ISNULL(O.MasterTags.value('(tags/RiskCategory/node())[1]','varchar(100)'),''))
	  AND (ISNULL(@LOB,ISNULL(UML.MasterTags.value('(tags/LOB/node())[1]','varchar(100)'),'')) = ISNULL(UML.MasterTags.value('(tags/LOB/node())[1]','varchar(100)'),''))
	  AND (@FromDate IS NULL OR CONVERT(DATETIME,CONVERT(VARCHAR(11),O.StartDate,106))>=CONVERT(DATETIME,CONVERT(VARCHAR(11),@FromDate,106)))                                                                            
	  AND (@ToDate IS NULL OR CONVERT(DATETIME,CONVERT(VARCHAR(11),O.StartDate,106))<=CONVERT(DATETIME,CONVERT(VARCHAR(11),@ToDate,106)))                                                                
	  AND (ISNULL(@Rm,ISNULL(UM.UserId,'')) = ISNULL(UM.UserId,''))
	  AND ((CASE WHEN @IgnoreClientSecurity=1 THEN 1                                                                                  
			WHEN @IgnoreClientSecurity=0 and rs.parentId = O.parentId            
			AND rs.ParentType=O.ParentType THEN 1 END) =1                                                     
		  )
	 AND ((CASE WHEN @IgnoreProductLevelSecurity=1 THEN 1
     WHEN @IgnoreProductLevelSecurity=0 AND rs1.parentId IS NOT NULL THEN 1 END) =1) 
	 
	  
	IF OBJECT_ID('tempdb..#TempOpp') IS NOT NULL
	  DROP TABLE #TempOpp  
	  Select * INTO #TempOpp FROM 
	  (
	  SELECT Opportunity_Id,OpportunityStatus,UpdatedDTM from #tempOpportunity 
	  UNION
	  Select OH.Opportunity_Id,OH.OpportunityStatus,OH.HistoryDTM 
	  FROM OpportunityHistory OH Inner JOin #tempOpportunity O ON OH.Opportunity_Id=O.Opportunity_Id 
	  )T
	  
	  
	  IF OBJECT_ID('tempdb..#TempOppRank') IS NOT NULL
	  DROP TABLE #TempOppRank
	  SELECT Opportunity_Id,OpportunityStatus,UpdatedDTM,
	  DENSE_RANK() OVER (PARTITION BY Opportunity_Id,OpportunityStatus ORDER BY UpdatedDTM) AS 'Rank' INTO #TempOppRank
	  FROM #TempOpp ORDER BY Opportunity_id 
	  
	  
	  IF OBJECT_ID('tempdb..#TempOppRank2') IS NOT NULL
	  DROP TABLE #TempOppRank2
	  SELECT *,DENSE_RANK() OVER (PARTITION BY Opportunity_Id ORDER BY UpdatedDTM) AS 'Rank2' INTO #TempOppRank2 FROM #TempOppRank WHERE [RANK]=1
	 
	  
	  	  IF OBJECT_ID('tempdb..#TempOppAgingFiletr') IS NOT NULL
	  DROP TABLE #TempOppAgingFiletr
	  SELECT t1.*,DATEDIFF(D,t1.UpdatedDTM,isnull(t2.UpdatedDTM,getdate())) AS 'Aging'--,DATEDIFF(D,TB.UpdatedDTM,GETDATE()) AS 'TotalAging' 
	  INTO #TempOppAgingFiletr FROM #TempOppRank2 t1 LEFT JOIN #TempOppRank2 t2 on t1.Opportunity_Id=t2.Opportunity_Id and t1.rank2=t2.rank2-1
	  LEFT JOIN (Select * from #TempOppRank2 where Rank2=1)TB ON t1.Opportunity_id=TB.Opportunity_id
     
     IF OBJECT_ID('tempdb..#TempOppAging') IS NOT NULL
	  DROP TABLE #TempOppAging
      SELECT * INTO #TempOppAging FROM #TempOppAgingFiletr 
      WHERE (@agingday IS NULL OR Aging >=@agingday) 
	  
	  
	 IF OBJECT_ID('tempdb..#TempOppPivot') IS NOT NULL
	 DROP TABLE #TempOppPivot
	 SELECT * INTO #TempOppPivot FROM (SELECT Opportunity_id,OpportunityStatus,Aging FROM #TempOppAging) as Pv
     PIVOT
     (
      SUM(Aging) FOR OpportunityStatus IN ([Initial Discussion],[Credit Analysis],[Credit Queries],[IM/CC Approved],[IC Approved],
     [Documentation],[Accepted Sanction],[Modified IC Sanction],[Disbursement],[Dropped])
     )P  
     
     	 IF OBJECT_ID('tempdb..#TempJAnalyst') IS NOT NULL
	  DROP TABLE #TempJAnalyst
      SELECT DISTINCT Opportunity_Id,OT.T.value('@JuniorAnalystName', 'varchar(100)') AS 'JuniorAnalyst' INTO #TempJAnalyst
	  FROM #tempOpportunity  Outer apply OpenTags.nodes('//otag//tags//JuniorAnalystId') AS OT(T)
	  
	  IF OBJECT_ID('tempdb..#TempSAnalyst') IS NOT NULL
	  DROP TABLE #TempSAnalyst
      SELECT DISTINCT Opportunity_Id,OT.T.value('@SeniorAnalystName', 'varchar(100)') AS 'SeniorAnalyst' INTO #TempSAnalyst
	  FROM #tempOpportunity  Outer apply OpenTags.nodes('//otag//tags//SeniorAnalystId') AS OT(T)
	
	
	 IF OBJECT_ID('tempdb..#TempDialData') IS NOT NULL
	  DROP TABLE #TempDialData
     SELECT OP.Opportunity_id,O.RM,O.RMName,O.ClientName AS 'Borrower_Name',JA.JuniorAnalyst AS 'Junior_Analyst',SA.SeniorAnalyst AS 'Senior_Analyst',O.OpportunityStatus AS 'Current_Stage',
     (ISNULL(OP.[Initial Discussion],0)+ISNULL(OP.[Credit Analysis],0)+ISNULL(OP.[Credit Queries],0)+ISNULL(OP.[IM/CC Approved],0)+
     ISNULL(OP.[IC Approved],0)+ISNULL(OP.[Documentation],0)+ISNULL(OP.[Accepted Sanction],0)+ISNULL(OP.[Modified IC Sanction],0)+
     ISNULL(OP.[Disbursement],0)+ISNULL(OP.[Dropped],0)) AS 'TotalAging',O.OpportunityValue As 'Value',
     ISNULL(OP.[Initial Discussion],0) AS 'Initial_Discussion_Aging',ISNULL(OP.[Credit Analysis],0) AS 'Credit_Analysis_Aging',
     ISNULL(OP.[Credit Queries],0) AS 'Credit_Queries_Aging',ISNULL(OP.[IM/CC Approved],0) AS 'IMCC_Approved_Aging',ISNULL(OP.[IC Approved],0) AS 'IC_Approved_Aging',
     ISNULL(OP.[Documentation],0) AS 'Documentation_Aging',ISNULL(OP.[Accepted Sanction],0) AS 'Accepted_Sanction_Aging',
     ISNULL(OP.[Modified IC Sanction],0) AS 'Modified_IC_Sanction_Aging',ISNULL(OP.[Disbursement],0) AS 'Disbursement_Aging',ISNULL(OP.[Dropped],0) AS 'Dropped_Aging',
     O.MasterTags.value('(tags/RiskCategory/node())[1]','varchar(100)') AS 'RiskCategory',(ISNULL(OP.[Dropped],0)+ISNULL(OP.[IM/CC Approved],0)+ISNULL(OP.[IC Approved],0)+
     ISNULL(OP.[Documentation],0)+ISNULL(OP.[Disbursement],0)) AS 'icstatus' INTO #TempDialData
     FROM #TempOppPivot OP LEFT JOIN #tempOpportunity O ON OP.Opportunity_Id=O.Opportunity_Id
     LEFT JOIN (
     	 SELECT Opportunity_Id,STUFF((SELECT ', ' + CAST(JuniorAnalyst AS VARCHAR(100)) [text()]
         FROM #TempJAnalyst 
         WHERE Opportunity_Id = A.Opportunity_Id
         FOR XML PATH(''), TYPE).value('.','NVARCHAR(MAX)'),1,2,' ') AS 'JuniorAnalyst'
		 FROM #TempJAnalyst A
		 GROUP BY Opportunity_Id
     ) JA ON JA.Opportunity_Id=OP.Opportunity_Id
     LEFT JOIN (
		SELECT Opportunity_Id,STUFF((SELECT ', ' + CAST(SeniorAnalyst AS VARCHAR(100)) [text()]
         FROM #TempSAnalyst 
         WHERE Opportunity_Id = A.Opportunity_Id
         FOR XML PATH(''), TYPE).value('.','NVARCHAR(MAX)'),1,2,' ') AS 'SeniorAnalyst'
		 FROM #TempSAnalyst A
		 GROUP BY Opportunity_Id
     )SA ON SA.Opportunity_Id=OP.Opportunity_Id 
     
     --SELECT * FROM #TempDialData WHERE (@totalaging IS NULL OR TotalAging >=@totalaging)
     --AND (@icstatus IS NULL OR [icstatus] =@icstatus)
     SELECT Opportunity_id,RMName,ISNULL(Borrower_Name,'') AS 'Borrower_Name',ISNULL(RiskCategory,'') AS 'RiskCategory',Value,Current_Stage,RM,Junior_Analyst,Senior_Analyst,TotalAging,Initial_Discussion_Aging,
		Credit_Analysis_Aging,Credit_Queries_Aging,IMCC_Approved_Aging,IC_Approved_Aging,Documentation_Aging,Accepted_Sanction_Aging,
		Modified_IC_Sanction_Aging,Disbursement_Aging,Dropped_Aging,icstatus FROM #TempDialData  WHERE (@totalaging IS NULL OR TotalAging >=@totalaging)
		AND (@icstatus IS NULL OR [icstatus] =@icstatus)
END 


------------Destiny
 /************************************************************************                                                                              
 '     Object Name   : TestDestiny                                  
 '     Purpose       : 
 '     Author        : Deepak
 '     Creation Date : 
 '	   Test 
 '
************************************************************************/                                 
ALTER PROC [dbo].[TestDestiny]
AS
BEGIN TRY                           
	DECLARE @ErrorMessage NVARCHAR(4000),@ErrorSeverity INT,@ErrorState INT,@MinDate VARCHAR(15),@ZoneRegionBrokerMaxDate DATETIME,@Inst_Id INT,
	@BranchMaxDate DATETIME,@UserMaxDate DATETIME,@RMMaxDate DATETIME
	SET @Inst_Id=4
	--SELECT TOP 10 * FROM TestDestiny.tblSubbrokerMaster
	--SELECT TOP 10 * FROM TestDestiny.tblSubBrokerAddressDetails 
	--SELECT TOP 10 * FROM TestDestiny.tblBranchMaster
	
	IF (SELECT DATEDIFF(D,MIN(CreatedOn),GETDATE()) FROM Tbl_Destiny_SubBrokerMaster_Stagging)>7
	BEGIN
		SELECT  @MinDate=CONVERT(VARCHAR(15),MIN(CreatedOn),106) FROM Tbl_Destiny_SubBrokerMaster_Stagging
		DELETE FROM Tbl_Destiny_SubBrokerMaster_Stagging WHERE CONVERT(VARCHAR(15),CreatedOn,106)=@MinDate
		DELETE FROM Tbl_Destiny_RM_Mapping WHERE CONVERT(VARCHAR(15),CreatedOn,106)=@MinDate
		DELETE FROM Tbl_Destiny_EmpId WHERE CONVERT(VARCHAR(15),CreatedOn,106)=@MinDate
		DELETE FROM Tbl_Destiny_BranchMaster WHERE CONVERT(VARCHAR(15),CreatedOn,106)=@MinDate
	END
	SELECT @ZoneRegionBrokerMaxDate=MAX(CreatedOn) FROM Tbl_Destiny_SubBrokerMaster_Stagging
	SELECT @BranchMaxDate=MAX(CreatedOn) FROM Tbl_Destiny_SubBrokerMaster_Stagging
	SELECT @UserMaxDate=MAX(CreatedOn) FROM Tbl_Destiny_EmpId
	SELECT @RMMaxDate=MAX(CreatedOn) FROM Tbl_Destiny_RM_Mapping
	--Insert Tbl_Destiny_SubBrokerMaster_Stagging From Destiny DB tblSubbrokerMaster
	INSERT INTO Tbl_Destiny_SubBrokerMaster_Stagging(SubBrokerId,SubBrokerCode,PSubCode,SubBrokerName,ContactPerMob,EmailID,ContactPerName,BranchId,
	BranchName,StatusOfApplicant,PAN,PerAdd1,PerPin,PerCity,PerState,PerCountry,CreatedOn)
	SELECT DISTINCT SBM.SubBrokerId,SBM.SubBrokerCode,PSC.SubBrokerCode,SBM.SubBrokerName,SBM.ContactPerMob,SBM.EmailID,SBM.ContactPerName,SBM.BranchId,BM.BranchName,
	SBM.StatusOfApplicant,SBM.PAN,SBA.PerAdd1,SBA.PerPin,SBA.PerCity,SBA.PerState,SBA.PerCountry,GETDATE() AS 'CreatedOn' 
	FROM TestDestiny.tblSubbrokerMaster SBM 
	LEFT JOIN TestDestiny.tblSubBrokerAddressDetails SBA ON SBM.SubBrokerId=SBA.SubBrokerId
	LEFT JOIN TestDestiny.tblBranchMaster BM ON SBM.BranchId=BM.BranchId 
	LEFT JOIN TestDestiny.tblSubbrokerChildMapping PSUB ON PSUB.ParentSubBrokerId=SBM.SubBrokerId 
	AND PSUB.ChildSubBrokerId=SBM.SubBrokerId
	LEFT JOIN TestDestiny.tblSubbrokerMaster PSC ON PSC.SubBrokerId=PSUB.ParentSubBrokerId
	--Insert Tbl_Destiny_RM_Mapping From Destiny DB tblSubbrokerRMMapping
	INSERT INTO Tbl_Destiny_RM_Mapping(SubBrokerId,EmployeeId,CreatedOn)
	SELECT SubBrokerId,EmployeeId,GETDATE() AS 'CreatedOn' 
	FROM EDEMUMFPDPRDB01.OptiCloudLiveDB.dbo.tblSubbrokerRMMapping
	
	--Insert Tbl_Destiny_EmpId From Destiny DB tblEmployeeMaster
	INSERT INTO Tbl_Destiny_EmpId(EmpId,CreatedOn)
	SELECT EmpId,GETDATE() AS 'CreatedOn' FROM TestDestiny.tblEmployeeMaster
	
	--Insert Tbl_Destiny_BranchMaster From Destiny DB tblBranchMaster
	INSERT INTO Tbl_Destiny_BranchMaster (BranchId,BranchName,CreatedOn)
	SELECT BranchId,BranchName,GETDATE() AS 'CreatedOn' FROM TestDestiny.tblBranchMaster
	
	--Insert TagMaster Zone
	INSERT INTO TagMaster (TagType,tagName,tagvalue,TagParent,MasterTags,Inst_Id,TagIsActive,UpdatedBy,UpdatedDTM)
	SELECT DISTINCT 'Zone',RTRIM(LTRIM(PerState)),0,0,'<tag><ZoneCode></ZoneCode></tag>',@Inst_Id,1,0,GETDATE() 
	FROM Tbl_Destiny_SubBrokerMaster_Stagging ZS 
	LEFT JOIN TagMaster TM ON ZS.PerState=TM.tagName AND TM.TagType='Zone' AND TM.Inst_Id=@Inst_Id
	WHERE CreatedOn>@ZoneRegionBrokerMaxDate AND TM.tagName IS NULL AND ISNULL(ZS.PerState,'')<>''
	
	--Insert TagMaster Region
	INSERT INTO TagMaster (TagType,tagName,tagvalue,TagParent,MasterTags,Inst_Id,TagIsActive,UpdatedBy,UpdatedDTM)
	SELECT DISTINCT 'Region',RTRIM(LTRIM(PerState)),0,0,'<tag><RegionCode></RegionCode></tag>',@Inst_Id,1,0,GETDATE() 
	FROM Tbl_Destiny_SubBrokerMaster_Stagging ZS 
	LEFT JOIN TagMaster TM ON ZS.PerState=TM.tagName AND TM.TagType='Region' AND TM.Inst_Id=@Inst_Id
	WHERE ZS.CreatedOn>@ZoneRegionBrokerMaxDate AND TM.tagName IS NULL AND ISNULL(ZS.PerState,'')<>''
	
	--Insert TagMaster Branch
	INSERT INTO TagMaster (TagType,tagName,tagvalue,TagParent,MasterTags,Inst_Id,TagIsActive,UpdatedBy,UpdatedDTM)
	SELECT DISTINCT 'Branch',RTRIM(LTRIM(BM.BranchName)),0,0,'<tag><BranchCode>'+CAST(BM.BranchId AS VARCHAR(50))+'</BranchCode></tag>',@Inst_Id,1,0,GETDATE() 
	FROM Tbl_Destiny_BranchMaster BM LEFT Join TagMaster TM ON TM.tagName=BM.BranchName AND TM.TagType='Branch' AND TM.Inst_Id=@Inst_Id
	WHERE BM.CreatedOn>@BranchMaxDate AND TM.tagName IS NULL AND ISNULL(BM.BranchName,'')<>''
	
	--Insert UserMaster	
	IF OBJECT_ID('tempdb..#TempSubRank') IS NOT NULL                           
    DROP TABLE #TempSubRank  
	SELECT *,RANK() OVER(PARTITION BY [SubBrokerId] ORDER BY EmployeeId) AS 'SubBrokerRank' INTO #TempSubRank FROM Tbl_Destiny_RM_Mapping
	WHERE CreatedOn>@RMMaxDate
	INSERT INTO UserMaster (LoginId,UserName,inst_id,ParentUserId,email,mobile,isActive,MasterTags,UpdatedBy,UpdatedDTM,Emp_code,IsAdUser)  
	SELECT DISTINCT AD.[User_Name],AD.Emp_name,@Inst_Id,1,AD.EMAIL,AD.MOBILE,1,'<tags><SubCode>'+CAST(DEM.EmpId AS VARCHAR(100))+'</SubCode></tags>',0
	,GETDATE(),DEM.EmpId,1 FROM Tbl_Destiny_EmpId DEM 
	Inner JOIN Employee_ActiveDirectory AD ON CAST(DEM.EmpId AS VARCHAR(20))=AD.Emp_Code 
 	Inner JOIN #TempSubRank RM ON DEM.EmpId=RM.EmployeeId AND RM.SubBrokerRank=1
 	LEFT JOIN UserMaster UM ON UM.Emp_code=CAST(DEM.EmpId AS VARCHAR(100)) AND UM.Inst_Id=@Inst_Id
 	WHERE DEM.CreatedOn>@UserMaxDate AND UM.Emp_code IS NULL AND UM.LoginId IS NULL
 	
 	--Update ClientMaster
 	IF EXISTS(SELECT 1 FROM ClientMaster C Inner Join Tbl_Destiny_SubBrokerMaster_Stagging S 
 	ON CAST(S.SubBrokerCode AS VARCHAR(20))=C.UniqueCode WHERE C.Inst_Id=@Inst_Id)
 	BEGIN
 	Print 'ClientMaster Update Begin'
		Update CM SET CM.ClientName=LEFT(S.SubBrokerName,200),CM.Category=CASE WHEN S.StatusOfApplicant ='Individual' THEN S.StatusOfApplicant ELSE 'Non-Individual' END,
		CM.MasterTags='<tags><AutoCode>'+CAST(S.SubBrokerId AS VARCHAR(20))+'</AutoCode>
		<PSubCode>'+ISNULL(CONVERT(VARCHAR(20),S.PSubCode),'')+'</PSubCode><BranchName>'+ISNULL(S.BranchName,'')+'</BranchName><RegionName>'+ISNULL(S.PerState,'')+'</RegionName>
		<ZoneName>'+ISNULL(S.PerState,'')+'</ZoneName>
		<BrokerCategory>'+CASE WHEN S.StatusOfApplicant ='Individual' THEN S.StatusOfApplicant ELSE 'Non-Individual' END+'</BrokerCategory>                  
		<ClientSource>Broker</ClientSource>
		<Primary>'+ISNULL(CONVERT(VARCHAR(10),UM.UserId),'')+'</Primary>    
		<Secondary>'+CAST(ISNULL(NULLIF(CM.MasterTags.value('(tags/Secondary/node())[1]','varchar(100)'),''),'') AS VARCHAR(100))+'</Secondary>
		<Tertiary>'+CAST(ISNULL(NULLIF(CM.MasterTags.value('(tags/Tertiary/node())[1]','varchar(100)'),''),'') AS VARCHAR(100))+'</Tertiary>                         
		<Website></Website></tags>',                     
		CM.Pan=S.Pan,
		CM.UpdatedDTM =GETDATE(),                
		CM.UpdatedBy =0
		FROM ClientMaster CM Inner Join Tbl_Destiny_SubBrokerMaster_Stagging S ON CAST(S.SubBrokerCode AS VARCHAR(20))=CM.UniqueCode
		LEFT JOIN Tbl_Destiny_SubBrokerMaster_Stagging SP ON SP.SubBrokerId=S.SubBrokerId
		LEFT JOIN #TempSubRank RM ON RM.SubBrokerId=SP.SubBrokerId AND RM.SubBrokerRank=1
		LEFT JOIN UserMaster UM ON UM.Emp_code=CAST(RM.EmployeeId AS VARCHAR(20)) 
		WHERE CM.Inst_Id=@Inst_Id AND ISNULL(SP.SubBrokerCode,'')<>'' AND S.CreatedOn>@ZoneRegionBrokerMaxDate AND ISNULL(S.SubBrokerName,'')<>''
		AND LEN(S.SubBrokerCode)<=20 AND LEN(ISNULL(S.PAN,''))<=10 
		Print 'ClientMaster Update End'
 	END
 	
 	--Insert ClientMaster
 	
 	 IF OBJECT_ID('tempdb..#TempClientData') IS NOT NULL                           
	 DROP TABLE #TempClientData
	 Print 'ClientMaster Insert Begin'
	 SELECT DISTINCT S.SubBrokerId,S.SubBrokerCode,S.PSubCode,S.SubBrokerName,S.ContactPerMob,S.EmailID,S.ContactPerName,S.BranchId,S.BranchName,
	 S.StatusOfApplicant,S.PAN,S.PerAdd1,S.PerPin,S.PerCity,S.PerState,S.PerCountry,UM.UserId INTO #TempClientData 
	 FROM Tbl_Destiny_SubBrokerMaster_Stagging S 
	 LEFT JOIN ClientMaster CM ON S.SubBrokerCode=CM.UniqueCode AND CM.Inst_Id=@Inst_Id
	 LEFT JOIN Tbl_Destiny_SubBrokerMaster_Stagging SP ON SP.SubBrokerId=S.SubBrokerId
	 LEFT JOIN #TempSubRank RM ON RM.SubBrokerId=SP.SubBrokerId AND RM.SubBrokerRank=1
	 LEFT JOIN UserMaster UM ON UM.Emp_code=CAST(RM.EmployeeId AS VARCHAR(20)) and UM.Inst_Id=@Inst_Id
	 WHERE S.CreatedOn>@ZoneRegionBrokerMaxDate AND ISNULL(S.SubBrokerName,'')<>'' AND CM.UniqueCode IS NULL
 	
	 INSERT INTO ClientMaster (ClientName,Type,Category,Inst_Id,UniqueCode,MasterTags,UpdatedBy,UpdatedDTM,IsActive,ShortName,PAN)   
	 SELECT LEFT(CD.SubBrokerName,200),'SB',CASE WHEN CD.StatusOfApplicant ='Individual' THEN CD.StatusOfApplicant ELSE 'Non-Individual' END,@Inst_Id,CD.SubBrokerCode,'<tags><AutoCode>'+CAST(CD.SubBrokerId AS VARCHAR(20))+'</AutoCode>                        
	  <PSubCode>'+ISNULL(CONVERT(VARCHAR(20),CD.PSubCode),'')+'</PSubCode>                        
	  <BranchName>'+ISNULL(CD.BranchName,'')+'</BranchName>                        
	  <RegionName>'+ISNULL(CD.PerState,'')+'</RegionName>                        
	  <ZoneName>'+ISNULL(CD.PerState,'')+'</ZoneName>                        
	  <BrokerCategory>'+CASE WHEN CD.StatusOfApplicant ='Individual' THEN CD.StatusOfApplicant ELSE 'Non-Individual' END+'</BrokerCategory>              
	  <ClientSource>Broker</ClientSource>                 
	  <Primary>'+ISNULL(CONVERT(varchar(10),CD.UserId),'')+'</Primary>                         
	  <Website></Website></tags>',0,GETDATE(),1,'',CD.PAN FROM #TempClientData CD LEFT JOIN ClientMaster CM ON CD.SubBrokerCode=CM.UniqueCode AND CM.Inst_Id=@Inst_Id
	  WHERE LEN(CD.SubBrokerCode)<=20 AND LEN(ISNULL(CD.PAN,''))<=10 AND ISNULL(CD.SubBrokerName,'')<>'' AND CM.UniqueCode IS NULL
	 Print 'ClientMaster Insert End' 
	 
	 
	 Print 'ContactDetails Update Begin'
	IF OBJECT_ID('tempdb..#TempContactDetails') IS NOT NULL                           
	DROP TABLE #TempContactDetails  
	CREATE TABLe #TempContactDetails                       
	(                        
	id int identity,                        
	code varchar(100),                                              
	Email varchar(100),                        
	Mobile varchar(100),
	ParentId BigINt
	)       
	  
	 INSERT into #TempContactDetails  
	 SELECT DISTINCT S.SubBrokerCode,ISNUll(S.EmailID,''),ISnull(S.ContactPerMob,''),CM.Client_Id FROM Tbl_Destiny_SubBrokerMaster_Stagging S 
     INNER JOIN ClientMaster CM ON CM.UniqueCode =S.SubBrokerCode  WHERE ISNULL(CM.UniqueCode,'')<>'' AND S.CreatedOn >@ZoneRegionBrokerMaxDate 
	 --
	 
	 UPDATE CD SET CD.Details=TCD.Email,CD.UpdatedBY=0,UpdatedDTM=GETDATE() FROM
	 ContactDetails CD Inner Join #TempContactDetails TCD ON CD.ParentId=TCD.ParentId AND ParentType='Client'
	 WHERE CD.Type='Email'
	 
	 UPDATE CD SET CD.Details=TCD.Mobile,CD.UpdatedBY=0,UpdatedDTM=GETDATE() FROM
	 ContactDetails CD Inner Join #TempContactDetails TCD ON CD.ParentId=TCD.ParentId AND ParentType='Client'
	 WHERE CD.Type='Mobile'
	Print 'ContactDetails Update END'
	
	--Print 'ContactDetails Insert END'
	--Insert Into ContactDetails(Type,Details,isDefault,ParentType,ParentId,Inst_Id,UpdatedBy,UpdatedDTM)
	--SELECT 'Email',TCD.Email,0,'Client',TCD.ParentId,4,0,GETDATE() FROM #TempContactDetails TCD 
	--LEFT JOIN ContactDetails CD ON CD.ParentId=TCD.ParentId AND CD.ParentType='Client'
	--WHERE CD.ParentId IS NULL AND ISNULL(TCD.Email,'')<>''
	--Insert Into ContactDetails(Type,Details,isDefault,ParentType,ParentId,Inst_Id,UpdatedBy,UpdatedDTM)
	--SELECT 'Mobile',TCD.Mobile,0,'Client',TCD.ParentId,4,0,GETDATE() FROM #TempContactDetails TCD 
	--LEFT JOIN ContactDetails CD ON CD.ParentId=TCD.ParentId AND CD.ParentType='Client'
	--WHERE CD.ParentId IS NULL AND ISNULL(TCD.Mobile,'')<>''

 --	Print 'ContactDetails Insert End'
	 
	--   --Update ContactDetails
	--Print 'ContactDetails Update Begin'
	--IF OBJECT_ID('tempdb..#TempContactDetails') IS NOT NULL                           
	--DROP TABLE #TempContactDetails  
	--CREATE TABLe #TempContactDetails                       
	--(                        
	--id int identity,                        
	--code varchar(100),                                              
	--Email varchar(100),                        
	--Mobile varchar(100)                        
	--)       
	  
	-- INSERT into #TempContactDetails  
	-- SELECT DISTINCT S.SubBrokerCode,ISNUll(S.EmailID,''),ISnull(S.ContactPerMob,'') FROM Tbl_Destiny_SubBrokerMaster_Stagging S
 --    INNER JOIN ClientMaster CM ON CM.UniqueCode =S.SubBrokerCode WHERE S.CreatedOn >@ZoneRegionBrokerMaxDate    
	 
	-- UPDATE ContactDetails SET Details = CC.Details ,Inst_Id= @Inst_Id,UpdatedDTM=GETDATE() FROM                  
	--(SELECT  X.Type, Details,0 isDefault,'Client' ParentType,C.Client_Id ParentId,@Inst_Id Inst_Id,0 UpdatedBy,GETDATE() UpdatedDTM FROM (
	--SELECT code,Type,Details FROM #TempContactDetails                        
 --   UNPIVOT 
	--(                        
	--Details                        
	--for Type IN (Email,Mobile)                        
	--) u)X,ClientMaster C        
 --   WHERE C.UniqueCode =X.code AND C.Inst_Id=@Inst_Id)CC where CC.ParentId = ContactDetails.ParentId and CC.Type = ContactDetails.Type
	--Print 'ContactDetails Update end'
	
	-- --Insert ClientDetails
	-- Print 'ContactDetails Insert Begin'
	--INSERT INTO ContactDetails(Type,Details,isDefault,ParentType,ParentId,Inst_Id,UpdatedBy,UpdatedDTM)   
	--SELECT  X.Type AS 'Type', Details,0 isDefault,'Client' ParentType,C.Client_Id ParentId,@Inst_Id Inst_Id,0 UpdatedBy,GETDATE() UpdatedDTM FROM (                        
	--SELECT code, Type, Details    
	--FROM #TempContactDetails                        
	--unpivot                        
	--(                        
	--Details                        
 --   for Type in (Email,Mobile)                        
	--) u)X,ClientMaster C                        
 --  WHERE C.UniqueCode =X.code AND C.Inst_Id=@Inst_Id AND NOT Exists (SELECT CD.ParentId FROM ContactDetails CD                      
 --  WHERE  ISNUll(Cd.ParentId,0)=C.Client_Id and CD.ParentType='Client')    
 --	Print 'ContactDetails Insert End'
 
   Print 'Insert ContactDetails Start'
 		IF OBJECT_ID('tempdb..#TempC') IS NOT NULL                           
	DROP TABLE #TempC  
	SELECT  X.Type AS 'Type', Details,0 isDefault,'Client' ParentType,C.Client_Id ParentId,@Inst_Id Inst_Id,0 UpdatedBy,GETDATE() UpdatedDTM INTO #TempC FROM (                        
	SELECT code, Type, Details    
	FROM #TempContactDetails                        
	unpivot                        
	(                        
	Details                        
    for Type in (Email,Mobile)                        
	) u)X,ClientMaster C                        
	WHERE C.UniqueCode =X.code AND C.Inst_Id=@Inst_Id
	
	INSERT INTO ContactDetails(Type,Details,isDefault,ParentType,ParentId,Inst_Id,UpdatedBy,UpdatedDTM) 
	SELECT DISTINCT TCD.* FROM #TempC TCD 
	LEFT JOIN ContactDetails CD ON CD.ParentId=TCD.ParentId AND CD.ParentType='Client'
	WHERE CD.ParentId IS NULL AND ISNULL(TCD.Details,'')<>'' AND LEN(TCD.Details)>5
    Print 'Insert ContactDetails END'
 	--Update Address    
 	Print 'Address Update Begin'     
	UPDATE Address Set Add1 =S.PerAdd1,City=S.PerCity,State=S.PerState,PinCode=S.PerPin,UpdatedBy=0,UpdatedDTM=GETDATE(),Country=S.PerCountry                         
    FROM ClientMaster C,Tbl_Destiny_SubBrokerMaster_Stagging S                        
    WHERE C.UniqueCode =S.SubBrokerCode AND ISNULL(C.UniqueCode,'')<>'' AND C.Client_Id = parentId AND ParentType='Client' 
    AND C.inst_Id=@Inst_Id AND S.CreatedOn >@ZoneRegionBrokerMaxDate    
    Print 'Address Update End'
    --INsert Address
    Print 'Address Insert Begin'
    INSERT INTO Address (parentId,ParentType,Add1,City,State,PinCode,UpdatedBy,UpdatedDTM,Inst_Id,IsActive,Country)                    
	SELECT C.Client_Id,'Client',S.PerAdd1,S.PerCity,S.PerState,S.PerPin,0,GETDATE(),@Inst_Id,1,S.PerCountry
	FROM ClientMaster C INNER JOIN Tbl_Destiny_SubBrokerMaster_Stagging S  ON C.UniqueCode=S.SubBrokerCode
	WHERE C.Client_Id NOT IN (SELECT parentid FROM ADDRESS) AND C.Inst_Id=@Inst_Id  AND S.CreatedOn >@ZoneRegionBrokerMaxDate   
    Print 'Address Insert End'
   --UPDATE CONTACTS                        
    Print 'Contact Update Begin'                   
   UPDATE Contacts set ContactName = S.ContactPerName,UpdatedBy=0,UpdatedDTM=GETDATE()                         
   FROM ClientMaster C                    
   INNER JOIN Tbl_Destiny_SubBrokerMaster_Stagging S ON C.UniqueCode = S.SubBrokerCode                  
   INNER JOIN Contacts co On ISNULL(Co.ParentId,'')=C.Client_Id                
   WHERE EXISTS(SELECT parentId from Contacts Co WHERE ISNULL(Co.ParentId,'')=C.Client_Id AND Co.ParentType='Client' AND Co.Inst_Id=4) AND                
   ISNULL(S.ContactPerName,'')<>'' AND S.StatusOfApplicant <> 'Individual' AND C.Inst_Id=4 AND S.CreatedOn >@ZoneRegionBrokerMaxDate    
    Print 'Contact Update End'
    --Insert Contact
    Print 'Contact Insert Begin'
	INSERT INTO Contacts (ContactName,parentId,ParentType,UpdatedBy,UpdatedDTM,Inst_Id,IsActive)                       
	SELECT S.ContactPerName,C.Client_Id,'Client',0,GETDATE(),4,1 FROM ClientMaster C                    
	INNER JOIN Tbl_Destiny_SubBrokerMaster_Stagging S ON C.UniqueCode = S.SubBrokerCode                    
	WHERE NOT EXISTS(SELECT parentId FROM Contacts Co WHERE ISNULL(Co.ParentId,'')=c.Client_Id and Co.ParentType='Client')                 
	AND ISNULL(S.ContactPerName,'')!='' AND ISNULL(S.StatusOfApplicant,'') <> 'Individual' AND S.CreatedOn >@ZoneRegionBrokerMaxDate 
	Print 'Contact Insert End'  
END TRY
BEGIN CATCH
	SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE()                              
	RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);           
	Print 'Error : '+@ErrorMessage
    
END CATCH

