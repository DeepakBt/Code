using System;
using System.Data;
using System.Data.SqlClient;
using OfficeOpenXml;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace PMSExportExcel
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            DataTable PMSDT;
            DataTable PMSDIST;
            DataSet PMSDS;
            Program p = new Program();
            PMSDS = p.GetPMSData();
            PMSDT = PMSDS.Tables[0];
            PMSDIST = PMSDS.Tables[1];
            string PanNo=string.Empty;
            string dtPan=string.Empty;
            List<string> lstPan = new List<string>();
            if (PMSDT.Rows.Count > 0)
            {
                string FileName = Convert.ToString(PMSDT.Rows[0][0]);
                string FilePath = @"D:\PMSExcel\" + FileName + "_PMS.xlsx";
                int RowCount = 0;
                bool PanFount=false;
                RowCount=PMSDT.Rows.Count;
                FileInfo NewFile = new FileInfo(FilePath);
                if (File.Exists(FilePath))
                {
                    File.Delete(FilePath);
                    Console.WriteLine("File Deleted.");
                }
                var distinctPan = (from DataRow dRow in PMSDT.Rows select new { col1 = dRow["PAN_NO"]}).Distinct();
                var distinctPanDist = (from DataRow dRow in PMSDIST.Rows select new { Pan_No_Dist = dRow["Pan_No"] }).Distinct().ToList();
                
                using (ExcelPackage pck = new ExcelPackage(NewFile))
                {
                    ExcelWorksheet ws = pck.Workbook.Worksheets.Add("PmsData");
                    ws.Cells["A1"].LoadFromDataTable(PMSDT, true);
                    ws.Cells.AutoFitColumns();
                    using (var range = ws.Cells["A1:J1"]) 
                    {
                        range.Style.Font.Bold = true;
                    }
                    //ws.Cells["C2"].Style.Numberformat.Format = "yyyy-mm-dd";
                    ws.Column(3).Style.Numberformat.Format = "dd-mm-yyyy";
                    foreach (var Pan in distinctPan)
                    {
                        int startRange = 0;
                        int endRange = 0;
                        for (int i = 0; i < PMSDT.Rows.Count; i++)
                        {
                            DataRow dr = PMSDT.Rows[i];
                             PanNo = Convert.ToString(Pan.col1);
                             dtPan = Convert.ToString(dr[0]);
                            if (PanNo == dtPan)
                            {
                                PanFount = true;
                                if(startRange==0)
                                {
                                    startRange = i+2;
                                }
                            }else
                            {
                                if (PanFount == true)
                                {
                                    endRange = i + 1;
                                    PanFount = false;
                                }
                            }
                        }
                        if(endRange==0)
                        {
                            endRange = PMSDT.Rows.Count + 1;
                        }
                        ws.Cells["A" + startRange.ToString() + ":A" + endRange.ToString()].Merge = true;
                        ws.Cells["B" + startRange.ToString() + ":B" + endRange.ToString()].Merge = true;
                        ws.Cells["C" + startRange.ToString() + ":C" + endRange.ToString()].Merge = true;
                        ws.Cells["D" + startRange.ToString() + ":D"+endRange.ToString()].Merge = true;
                        ws.Cells["E" + startRange.ToString() + ":E" + endRange.ToString()].Merge = true;
                        ws.Cells["F" + startRange.ToString() + ":F" + endRange.ToString()].Merge = true;
                        foreach (var pan in distinctPanDist)
                        {
                            if (PanNo == Convert.ToString(pan.Pan_No_Dist))
                            {
                                ExcelWorksheet wsDis = pck.Workbook.Worksheets.Add(PanNo);
                                wsDis.Cells["A1"].LoadFromDataTable(p.GetPMSDistributor(PMSDIST, PanNo), true);
                                wsDis.Cells.AutoFitColumns();
                                using (var range = wsDis.Cells["A1:B1"])
                                {
                                    range.Style.Font.Bold = true;
                                }
                            }
                        }
                        pck.Save();
                        startRange = 0;
                        endRange = 0;
                    }
                    Console.WriteLine("File Created.");
                }
            }
            else
            {
                Console.WriteLine("No Pms Data Found.");
            }
            Console.ReadKey();
        }
        public DataSet GetPMSData()
        {
            string connectionString =
            "Data Source=DESKTOP-MRNOIMN;Initial Catalog=TestDB;"
            + "Integrated Security=true";
            string queryString =
            "SELECT * FROM PMSDataTest Order By PAN_NO; SELECT DISTINCT PD.* FROM PMSDistributor PD LEFT OUTER JOIN PMSDataTest P ON PD.Pan_No=P.PAN_NO WHERE PD.Pan_No = P.PAN_NO";
            DataSet ds = new DataSet();
            using (SqlConnection connection =
            new SqlConnection(connectionString))
            {
                SqlCommand command = new SqlCommand(queryString, connection);
                try
                {
                    connection.Open();
                    SqlDataAdapter da = new SqlDataAdapter(command);
                    da.Fill(ds);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return ds;
            }
        }
        public DataTable GetPMSDistributor(DataTable dtPMSDistributor,string Pan_No)
        {
            DataTable dt=new DataTable();
            dt = dtPMSDistributor.AsEnumerable().Where(x => x.Field<string>("Pan_No") == Pan_No).CopyToDataTable();
            return dt;
        }
    }
}
